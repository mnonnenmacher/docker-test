name: main

on:
  push:
    branches:
      - main

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false
  REGISTRY: ghcr.io
  BASE_IMAGE_NAME: docker-test-base
  BASE_IMAGE_CACHE_TAG: ghcr.io/mnonnenmacher/docker-test-base:cache
  IMAGE_NAME: docker-test
  IMAGE_FULL_NAME: ghcr.io/mnonnenmacher/docker-test
  IMAGE_TAG: ghcr.io/mnonnenmacher/docker-test:latest

jobs:
  main:
    runs-on: ubuntu-22.04
    permissions:
      packages: write
    # Use a local registry to prevent Jib from caching the base image.
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Docker base image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: localhost:5000/docker-test-base:latest
          cache-from: type=registry,ref=${{ env.BASE_IMAGE_CACHE_TAG }}
          cache-to: type=registry,ref=${{ env.BASE_IMAGE_CACHE_TAG }},mode=max
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-home-cache-cleanup: true
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          tags: |
            type=ref,event=branch
            type=sha
      - name: Print labels
        run: echo $(echo "${{ steps.meta.outputs.labels }}" | tr '\n' ',' | sed 's/,$//')
      - name: Print tags
        run: echo $(echo "${{ steps.meta.outputs.tags }}" | tr '\n' ',' | sed 's/,$//')
      - name: Build App
        run: |
          ./gradlew \
            -PdockerBaseImagePrefix=localhost:5000/ \
            jibDockerBuild \
            --image ${{ env.IMAGE_TAG }} \
            -Djib.console=plain \
            -Djib.allowInsecureRegistries=true \
            -Djib.container.labels="$(echo "${{ steps.meta.outputs.labels }}" | tr '\n' ',' | sed 's/,$//')" \
            -Djib.to.tags="$(echo "${{ steps.meta.outputs.tags }}" | tr '\n' ',' | sed 's/,$//')"
      - name: Print image labels
        run: docker image inspect ${{ env.IMAGE_TAG }} | jq -r '.[0].Config.Labels'
      - name: Verify image
        run: docker run --rm ${{ env.IMAGE_TAG }}
      - name: Run Tests
        run: |
          sudo chown -R 1000:1000 /home/runner/.gradle
          sudo chown -R 1000:1000 ${{ github.workspace }}
          docker run \
            -v ${{ github.workspace }}:/workspace \
            -v /home/runner/.gradle:/home/test/.gradle \
            -w /workspace \
            --entrypoint=sh \
            ${{ env.IMAGE_TAG }} \
            -c "GRADLE_USER_HOME=/home/test/.gradle ./gradlew --no-daemon run"
          sudo chown -R 1001:121 /home/runner/.gradle
          sudo chown -R 1001:121 ${{ github.workspace }}
      - name: List images
        run: docker image ls
      - name: Push image
        run: docker push ${{ env.IMAGE_FULL_NAME }} --all-tags
